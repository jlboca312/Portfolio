//Jedrick Boca                                                                 
//TUID - 915050649                                                              
//CRYPTO CRACKER ASSIGNMENT

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


char shiftChar(char c, int k);
char *shiftString(char *s, int k);
void get_dictfile_stats(FILE *fp, int *dictnumChars, int *dictnumLines);
void get_encryptfile_stats(FILE *fp, int *encrypt_numChars, int *encrypt_numLines); 
char **file_to_array(FILE *fp, char *s, int numLines);
int is_in_dictionary(char *word, char **dictfileArray);
char *chop_begin_quote(char *word);
char *chop_end_quote(char *word);


/* gets the number of characters and lines of dictionary file */
void get_dictfile_stats(FILE *fp, int *dictnumChars, int *dictnumLines){
  int c;
  *dictnumChars = 0;
  *dictnumLines = 0;
  
  while((c = fgetc(fp)) != EOF){
    (*dictnumChars)++;
    if(c == '\n'){
      (*dictnumLines)++;
    }
  }

}

/* gets the number of characters and lines of encrypted file */
void get_encryptfile_stats(FILE *fp, int *encrypt_numChars, int *encrypt_numLines){
  int c;
  *encrypt_numChars = 0;
  *encrypt_numLines = 0;

  while((c = fgetc(fp)) != EOF){
    (*encrypt_numChars)++;
    if(c == '\n'){
      (*encrypt_numLines)++;
    }
  }

}

char shiftChar(char c, int k) {
  if(c < 'A' || c > 'Z'){
    return c;
  }
  c+=k;
  
  if(c>'Z'){
    c-=26;
  }else if(c<'A'){
    c+=26;
  }
  return c;
}


/* shifts all characters in the string k times */
char *shiftString(char *s, int k){
  char *newString;
  int slength = strlen(s);
  int i = 0;

  //allocates memory for new string
  newString = malloc(slength + 1);

  for(i = 0; i < slength; i++){
    newString[i] = shiftChar(s[i], k);
  }
  newString[i] = '\0';

  return newString;
}

/* puts each line of file into an array slot */
char **file_to_array(FILE *fp, char *s, int numLines){
  char **lines;
  int i, j, c;

  lines = (char**)malloc((numLines+1)*sizeof(char*));

  i = 0;
  lines[0] = &s[0];
  j = 1;

  while((c = fgetc(fp)) != EOF){
    if(c == '\n'){
      c = '\0';
      lines[j] = &s[i+1];
      j++;
    }
    s[i] = c;
    i++;
  }

  s[i] = '\0';
  lines[j-1] = NULL;
  return lines;
}

int is_in_dictionary(char *word, char **dictfileArray){
  int count = 0;
  int i = 0;
   
  /* counts number of words in dict file*/
  while(dictfileArray[i] != NULL){
    count++;
    i++;
  }

  int low = 0;
  int high = count - 1;
  int mid;
  
  /* performs binary search for word */
  while(low <= high) {
      mid = (low + high)/2;
      if(strcmp(dictfileArray[mid], word) < 0){
	  low = mid + 1; 
	}
      else if(strcmp(dictfileArray[mid], word) == 0){
	  return 1;
	}
      else if(strcmp(dictfileArray[mid], word) > 0){
	  high = mid-1;
	}

    }
  return 0;

}

char *chop_begin_quote(char *word){
  int i = 0;

  for(i = 0; i<strlen(word)-1; i++){
    word[i] = word[i+1];
  }
  word[i] = '\0';
  return word;
}

char *chop_end_quote(char *word){
  int length = strlen(word);
  word[length - 1] = '\0';
  
  return word;
}

int get_shift_value(char *word, char **dictfileArray){
  char *newString;
  int i;
  int shiftValue;

  //allocates memory for newString
  newString = malloc(strlen(word) + 1);

  //copies word to newString
  for(i = 0; i < strlen(word); i++){
    newString[i] = word[i];
  }  

  //gets rid of beginning/end quotes
  if(newString[0] == '"'){
    newString = chop_begin_quote(newString);
  }else if(newString[strlen(newString) - 1] == '"'){
    newString = chop_end_quote(newString);
  }
  
  //checks if word w/o shifting is already in the dictionary                                                                             
  if(is_in_dictionary(newString, dictfileArray)){
    return 0;
  }

  for(i = 0; i < 26; i++){
    newString = shiftString(newString, 1);
    if(is_in_dictionary(newString, dictfileArray)){
      return i+1;
    }
  }
  
  return 0;
}

int main(int argc, char **argv){
  FILE *encryptedFP; //file pointer to decrypted file 
  FILE *dictfileFP;
  char *encryptedFile;
  char *dictFile;
  int dictnumChars, dictnumLines;
  int encrypt_numChars, encrypt_numLines;
  char *s;
  char *t;
  char **dictfileArray;
  char **encryptfileArray;
  int i;
  
  if(argc != 3){
    printf("Needs two parameters, the name of the encrypted file and the dictionary file.\n");
    return 1;
  }
  
  encryptedFile = argv[1];
  dictFile = argv[2];

  
  //opens encrypted file and dictionary file and reads it
  encryptedFP = fopen(encryptedFile, "r");
  dictfileFP = fopen(dictFile, "r");

  //if file is null, print reading error
  if(encryptedFP == NULL){
    printf("Error opening %s for reading\n", argv[1]);
    return 2;
  }
  if(dictfileFP == NULL){
    printf("Error opening %s for reading\n", argv[2]);
    return 2;
    }
  
  //gets the number of chars and lines of dictionary and encrypted file
  get_dictfile_stats(dictfileFP,&dictnumChars, &dictnumLines);
  get_encryptfile_stats(encryptedFP, &encrypt_numChars, &encrypt_numLines);

  //allocates memory for array s(dict) and t(encrypt)
  if((s = (char*)malloc(dictnumChars+1)) == NULL){
    printf("Malloc Error\n");
    return 3;
  }
  
  if((t = (char*)malloc(encrypt_numChars+1)) == NULL){
    printf("Malloc Error\n");
    return 3;
  }

  rewind(encryptedFP);
  rewind(dictfileFP);
  
  dictfileArray = file_to_array(dictfileFP, s, dictnumLines);
  encryptfileArray = file_to_array(encryptedFP, t, encrypt_numLines);
  
  //gets the shift value of the encrypted file
  char *firstWord;
  char *space = " ";
  firstWord = strtok(encryptfileArray[0], space);  
  int shiftValue = get_shift_value(firstWord, dictfileArray);



  //THIS CONVERTS THE ENCRYPTED JAWS TEXT TO THE NORMAL JAWS TEXT
  for(i = 0; i < encrypt_numLines; i++){
    char *currWord;
    char *space = " ";
    
    currWord = strtok(encryptfileArray[i], space);
    while(currWord != NULL){
      char *shiftedString = shiftString(currWord, shiftValue);
      printf("%s ", shiftedString);
      
      currWord = strtok(NULL, space);
    }
    printf("\n");
   
  }
  
  printf("\nDONE!!!! File %s was decrypted.\n", encryptedFile);
  printf("The shift value was %d\n\n", shiftValue);


 
  fclose(encryptedFP);
  fclose(dictfileFP);
  return 0;

}

