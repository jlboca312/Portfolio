/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stringcollclient;

import java.util.*;
import java.io.*;

public class StringColl {

    private btNode c;
    private int howmany;

    //default constructor, ensures empty collection
    public StringColl() {
        c = null;
        howmany = 0;
    }

    //alternate cosntructor 
    public StringColl(int i) {
        c = null;
        howmany = 0;
    }

    private static btNode copytree(btNode t) {
        btNode root = null;
        if (t != null) {
            root = new btNode();
            root.info = t.info;
            root.left = copytree(t.left);
            root.right = copytree(t.right);
        }
        return root;
    }

    public void copy(StringColl obj) {
        if (this != obj) {
            howmany = obj.howmany;
            c = copytree(obj.c);
        }
    }

    public void insert(String i) {

        btNode pred = null;
        btNode p = c;

        while ((p != null) && (!p.info.equals(i))) {
            pred = p;
            if (p.info.compareTo(i) > 0) {
                p = p.left;
            } else {
                p = p.right;
            }
        }
        if (p == null) {
            howmany++;
            p = new btNode(i, null, null);
            if (pred != null) {
                if (pred.info.compareTo(i) > 0) {
                    pred.left = p;
                } else {
                    pred.right = p;
                }
            } else {
                c = p;
            }
        }

    }

    public void omit(String i) {
        btNode pred = null;
        btNode p = c;

        while ((p != null) && (!p.info.equals(i))) {
            pred = p;
            if (p.info.compareTo(i) > 0) {
                p = p.left;
            } else {
                p = p.right;
            }

        }

        if (p != null) {
            howmany--;
            btNode k = p;
            if (p.right == null) {
                k = p.left;
            } else if (p.left == null) {
                k = p.right;
            } else {
                btNode j = p.left;
                if (j.right == null) {
                    k = j;
                    k.right = p.right;
                } else {
                    while (j.right.right != null) {
                        j = j.right;
                    }
                    k = j.right;
                    j.right = k.left;
                    k.right = p.right;
                    k.left = p.left;
                }
            }

            if (pred == null) {
                c = k;
            } else if (pred.right == p) {
                pred.right = k;
            } else {
                pred.left = k;
            }

        }

    }

    public boolean belongs(String i) {
        btNode p = c;
        while ((p != null) && (!p.info.equals(i))) {

            if (p.info.compareTo(i) > 0) {
                p = p.left;
            } else {
                p = p.right;
            }

        }
        return (p != null);
    }

    public int get_howmany() {
        return howmany;
    }

    public void print(String outname) {
        try {
            PrintWriter outs = new PrintWriter(new FileOutputStream(outname));
            outs.println("The number of integers is " + howmany);
            outs.println();
            printtree(c, outs);
            outs.close();
        } catch (IOException ex) {
        }
    }

    public void print() {
        printtree(c);
    }

    public boolean equals(StringColl obj) {
        int j = 0;
        boolean result = (howmany == obj.howmany);
        if (result) {
            String[] a = new String[howmany];
            String[] b = new String[howmany];
            toarray(c, a, 0);
            toarray(obj.c, b, 0);

            j = 0;
            while ((result) && (j < howmany)) {
                result = (a[j].equals(b[j]));
                j++;
            }
        }
        return result;
    }
    private static void printtree(btNode t, PrintWriter outs) {
        if (t != null) {
            printtree(t.left, outs);
            outs.println(t.info);
            printtree(t.right, outs);
        }
    }

    private static void printtree(btNode t) {
        if (t != null) {

            printtree(t.left);
            System.out.println(t.info);
            if (t.left != null) {
                System.out.println("Left: " + t.left.info);
            } else {
                System.out.println("Left: null ");
            }
            if (t.right != null) {
                System.out.println("Right: " + t.right.info + "\n");
            } else {
                System.out.println("Right: null\n");
            }

            printtree(t.right);
        }
    }

    private static int toarray(btNode t, String[] a, int i) {
        int num_nodes = 0;
        if (t != null) {
            num_nodes = toarray(t.left, a, i);
            a[num_nodes + i] = t.info;
            num_nodes = num_nodes + 1 + toarray(t.right, a, num_nodes + i + 1);
        }
        return num_nodes;

    }
    private static class btNode {

        String info;
        btNode left;
        btNode right;

        //alternate constructor
        private btNode(String s, btNode lt, btNode rt) {
            this.info = s;
            this.left = lt;
            this.right = rt;
        }

        //default constructor, sets all to null, empty node
        private btNode() {
            this.info = "";
            this.left = null;
            this.right = null;
        }
    }
}
